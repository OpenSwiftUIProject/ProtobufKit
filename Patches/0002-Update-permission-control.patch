From bfcf41be7a27cba03c2961fda71f41bfbd6c9d62 Mon Sep 17 00:00:00 2001
From: Kyle <kyle201817146@gmail.com>
Date: Sun, 24 Nov 2024 23:24:56 +0800
Subject: [PATCH] Update permission control

---
 .../Data/Protobuf/ProtobufDecoder.swift       |  56 ++++----
 .../Data/Protobuf/ProtobufEncoder.swift       | 124 +++++++++---------
 .../Data/Protobuf/ProtobufMessage.swift       |  58 ++++----
 3 files changed, 119 insertions(+), 119 deletions(-)

diff --git a/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufDecoder.swift b/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufDecoder.swift
index 28c72e5..39e27d5 100644
--- a/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufDecoder.swift
+++ b/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufDecoder.swift
@@ -2,20 +2,20 @@
 //  ProtobufDecoder.swift
 //  ProtobufKit
 
-package import Foundation
+public import Foundation
 
 /// An object that decodes instances of a data type from protobuf objects.
-package struct ProtobufDecoder {
+public struct ProtobufDecoder {
     /// An error that can occur during `ProtobufDecoder` decoding.
-    package enum DecodingError: Error {
+    public enum DecodingError: Error {
         case failed
     }
     
     /// A type representing a field in a protobuf encoding.
-    package typealias Field = ProtobufFormat.Field
+    public typealias Field = ProtobufFormat.Field
     
     /// A type representing the wire type of a protobuf encoding.
-    package typealias WireType = ProtobufFormat.WireType
+    public typealias WireType = ProtobufFormat.WireType
     
     /// The data being decoded.
     var data: NSData
@@ -36,10 +36,10 @@ package struct ProtobufDecoder {
     var stack: [UnsafeRawPointer] = []
     
     /// User-defined information.
-    package var userInfo: [CodingUserInfoKey : Any] = [:]
+    public var userInfo: [CodingUserInfoKey : Any] = [:]
     
     /// Creates an instance with a data buffer.
-    package init(_ data: Data) {
+    public init(_ data: Data) {
         let nsData = data as NSData
         self.data = nsData
         let ptr = nsData.bytes
@@ -51,7 +51,7 @@ package struct ProtobufDecoder {
 
 extension ProtobufDecoder {
     /// Decodes the next field in the data.
-    package mutating func nextField() throws -> ProtobufDecoder.Field? {
+    public mutating func nextField() throws -> ProtobufDecoder.Field? {
         guard ptr < end else {
             packedField = Field(rawValue: 0)
             return nil
@@ -74,7 +74,7 @@ extension ProtobufDecoder {
     }
     
     /// Skips the next field in the data.
-    package mutating func skipField(_ field: ProtobufDecoder.Field) throws {
+    public mutating func skipField(_ field: ProtobufDecoder.Field) throws {
         switch field.wireType {
         case .varint:
             _ = try decodeVariant()
@@ -101,7 +101,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A boolean(Bool) value.
-    package mutating func boolField(_ field: ProtobufDecoder.Field) throws -> Bool {
+    public mutating func boolField(_ field: ProtobufDecoder.Field) throws -> Bool {
         switch field.wireType {
         case .varint:
             break
@@ -123,7 +123,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: An unsigned integer(UInt) value.
-    package mutating func uintField(_ field: ProtobufDecoder.Field) throws -> UInt {
+    public mutating func uintField(_ field: ProtobufDecoder.Field) throws -> UInt {
         switch field.wireType {
         case .varint:
             break
@@ -145,7 +145,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A ProtobufEnum value.
-    package mutating func enumField<T>(_ field: ProtobufDecoder.Field) throws -> T? where T: ProtobufEnum {
+    public mutating func enumField<T>(_ field: ProtobufDecoder.Field) throws -> T? where T: ProtobufEnum {
         try T(protobufValue: uintField(field))
     }
     
@@ -153,7 +153,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: An unsigned 8-bit integer(UInt8) value.
-    package mutating func uint8Field(_ field: ProtobufDecoder.Field) throws -> UInt8 {
+    public mutating func uint8Field(_ field: ProtobufDecoder.Field) throws -> UInt8 {
         try UInt8(uintField(field))
     }
     
@@ -161,7 +161,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: An unsigned 16-bit integer(UInt16) value.
-    package mutating func uint16Field(_ field: ProtobufDecoder.Field) throws -> UInt16 {
+    public mutating func uint16Field(_ field: ProtobufDecoder.Field) throws -> UInt16 {
         try UInt16(uintField(field))
     }
     
@@ -169,7 +169,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: An unsigned 32-bit integer(UInt32) value.
-    package mutating func uint32Field(_ field: ProtobufDecoder.Field) throws -> UInt32 {
+    public mutating func uint32Field(_ field: ProtobufDecoder.Field) throws -> UInt32 {
         try UInt32(uintField(field))
     }
     
@@ -177,7 +177,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: An unsigned 64-bit integer(UInt64) value.
-    package mutating func uint64Field(_ field: ProtobufDecoder.Field) throws -> UInt64 {
+    public mutating func uint64Field(_ field: ProtobufDecoder.Field) throws -> UInt64 {
         try UInt64(uintField(field))
     }
     
@@ -185,7 +185,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A signed integer(Int) value.
-    package mutating func intField(_ field: ProtobufDecoder.Field) throws -> Int {
+    public mutating func intField(_ field: ProtobufDecoder.Field) throws -> Int {
         let value = Int(bitPattern: try uintField(field))
         return Int(bitPattern: UInt(bitPattern: (value >> 1)) ^ UInt(bitPattern: -(value & 1)))
     }
@@ -194,7 +194,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A fixed 32-bit integer(UInt32) value.
-    package mutating func fixed32Field(_ field: ProtobufDecoder.Field) throws -> UInt32 {
+    public mutating func fixed32Field(_ field: ProtobufDecoder.Field) throws -> UInt32 {
         switch field.wireType {
         case .lengthDelimited:
             let offset = try decodeVariant()
@@ -222,7 +222,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A fixed 64-bit integer(UInt64) value.
-    package mutating func fixed64Field(_ field: ProtobufDecoder.Field) throws -> UInt64 {
+    public mutating func fixed64Field(_ field: ProtobufDecoder.Field) throws -> UInt64 {
         switch field.wireType {
         case .lengthDelimited:
             let offset = try decodeVariant()
@@ -250,7 +250,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A float(Float) value.
-    package mutating func floatField(_ field: ProtobufDecoder.Field) throws -> Float {
+    public mutating func floatField(_ field: ProtobufDecoder.Field) throws -> Float {
         switch field.wireType {
         case .lengthDelimited:
             let offset = try decodeVariant()
@@ -278,7 +278,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A double(Double) value.
-    package mutating func doubleField(_ field: ProtobufDecoder.Field) throws -> Double {
+    public mutating func doubleField(_ field: ProtobufDecoder.Field) throws -> Double {
         switch field.wireType {
         case .fixed64:
             break
@@ -315,7 +315,7 @@ extension ProtobufDecoder {
     /// - Parameter field: The field to decode.
     /// - Returns: A CGFloat value.
     @inline(__always)
-    package mutating func cgFloatField(_ field: ProtobufDecoder.Field) throws -> CGFloat {
+    public mutating func cgFloatField(_ field: ProtobufDecoder.Field) throws -> CGFloat {
         try doubleField(field)
     }
     
@@ -323,7 +323,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A data buffer value.
-    package mutating func dataBufferField(_ field: ProtobufDecoder.Field) throws -> UnsafeRawBufferPointer {
+    public mutating func dataBufferField(_ field: ProtobufDecoder.Field) throws -> UnsafeRawBufferPointer {
         switch field.wireType {
         case .lengthDelimited:
             try decodeDataBuffer()
@@ -336,7 +336,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A data value.
-    package mutating func dataField(_ field: ProtobufDecoder.Field) throws -> Data {
+    public mutating func dataField(_ field: ProtobufDecoder.Field) throws -> Data {
         switch field.wireType {
         case .lengthDelimited:
             let buffer = try decodeDataBuffer()
@@ -355,7 +355,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A ProtobufDecodableMessage value.
-    package mutating func messageField<T>(_ field: ProtobufDecoder.Field) throws -> T where T: ProtobufDecodableMessage {
+    public mutating func messageField<T>(_ field: ProtobufDecoder.Field) throws -> T where T: ProtobufDecodableMessage {
         guard field.wireType == .lengthDelimited else {
             throw DecodingError.failed
         }
@@ -368,7 +368,7 @@ extension ProtobufDecoder {
     ///   - field: The field to decode.
     ///   - body: A closure that decodes the message.
     /// - Returns: A value decoded from the message.
-    package mutating func messageField<T>(_ field: ProtobufDecoder.Field, _ body: (inout ProtobufDecoder) throws -> T) throws -> T {
+    public mutating func messageField<T>(_ field: ProtobufDecoder.Field, _ body: (inout ProtobufDecoder) throws -> T) throws -> T {
         guard field.wireType == .lengthDelimited else {
             throw DecodingError.failed
         }
@@ -379,7 +379,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A string value.
-    package mutating func stringField(_ field: ProtobufDecoder.Field) throws -> String {
+    public mutating func stringField(_ field: ProtobufDecoder.Field) throws -> String {
         let data = try dataField(field)
         guard let result = String(data: data, encoding: .utf8) else {
             throw DecodingError.failed
@@ -391,7 +391,7 @@ extension ProtobufDecoder {
     ///
     /// - Parameter field: The field to decode.
     /// - Returns: A codable value.
-    package mutating func codableField<T>(_ field: ProtobufDecoder.Field) throws -> T where T: Decodable {
+    public mutating func codableField<T>(_ field: ProtobufDecoder.Field) throws -> T where T: Decodable {
         let data = try dataField(field)
         return try value(fromBinaryPlist: data)
     }
diff --git a/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufEncoder.swift b/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufEncoder.swift
index cecdfb5..0fe7d46 100644
--- a/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufEncoder.swift
+++ b/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufEncoder.swift
@@ -2,20 +2,20 @@
 //  ProtobufEncoder.swift
 //  ProtobufKit
 
-package import Foundation
+public import Foundation
 
 /// An object that encodes instances of a data type as protobuf objects.
-package struct ProtobufEncoder {
+public struct ProtobufEncoder {
     /// An error that can occur during `ProtobufEncoder` encoding.
-    package enum EncodingError: Error {
+    public enum EncodingError: Error {
         case failed
     }
     
     /// A type representing a field in a protobuf encoding.
-    package typealias Field = ProtobufFormat.Field
+    public typealias Field = ProtobufFormat.Field
     
     /// A type representing the wire type of a protobuf encoding.
-    package typealias WireType = ProtobufFormat.WireType
+    public typealias WireType = ProtobufFormat.WireType
     
     /// The buffer being encoded.
     var buffer: UnsafeMutableRawPointer!
@@ -30,7 +30,7 @@ package struct ProtobufEncoder {
     var stack: [Int] = []
     
     /// User-defined information.
-    package var userInfo: [CodingUserInfoKey: Any] = [:]
+    public var userInfo: [CodingUserInfoKey: Any] = [:]
     
     /// Takes the encoded data.
     ///
@@ -48,7 +48,7 @@ package struct ProtobufEncoder {
     /// - Parameters:
     ///   - body: A closure that encodes the value.
     /// - Returns: The encoded data.
-    package static func encoding(_ body: (inout ProtobufEncoder) throws -> Void) rethrows -> Data {
+    public static func encoding(_ body: (inout ProtobufEncoder) throws -> Void) rethrows -> Data {
         var encoder = ProtobufEncoder()
         try body(&encoder)
         defer { free(encoder.buffer) }
@@ -60,7 +60,7 @@ package struct ProtobufEncoder {
     /// - Parameters:
     ///   - value: The value to encode.
     /// - Returns: The encoded data.
-    package static func encoding<T>(_ value: T) throws -> Data where T: ProtobufEncodableMessage {
+    public static func encoding<T>(_ value: T) throws -> Data where T: ProtobufEncodableMessage {
         try encoding { encoder in
             try value.encode(to: &encoder)
         }
@@ -139,7 +139,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func boolField(_ tag: UInt, _ value: Bool, defaultValue: Bool? = false) {
+    public mutating func boolField(_ tag: UInt, _ value: Bool, defaultValue: Bool? = false) {
         guard value != defaultValue else { return }
         let field = Field(tag, wireType: .varint)
         encodeVarint(field.rawValue)
@@ -153,7 +153,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func uintField(_ tag: UInt, _ value: UInt, defaultValue: UInt? = 0) {
+    public mutating func uintField(_ tag: UInt, _ value: UInt, defaultValue: UInt? = 0) {
         guard value != defaultValue else { return }
         let field = Field(tag, wireType: .varint)
         encodeVarint(field.rawValue)
@@ -167,7 +167,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func enumField<T>(_ tag: UInt, _ value: T, defaultValue: T?) where T: Equatable, T: ProtobufEnum {
+    public mutating func enumField<T>(_ tag: UInt, _ value: T, defaultValue: T?) where T: Equatable, T: ProtobufEnum {
         guard value != defaultValue else { return }
         enumField(tag, value)
     }
@@ -178,7 +178,7 @@ extension ProtobufEncoder {
     ///   - tag: The tag of the field.
     ///   - value: The value to encode.
     @inline(__always)
-    package mutating func enumField<T>(_ tag: UInt, _ value: T) where T: ProtobufEnum {
+    public mutating func enumField<T>(_ tag: UInt, _ value: T) where T: ProtobufEnum {
         let field = Field(tag, wireType: .varint)
         encodeVarint(field.rawValue)
         encodeVarint(value.protobufValue)
@@ -191,7 +191,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func uint64Field(_ tag: UInt, _ value: UInt64, defaultValue: UInt64? = 0) {
+    public mutating func uint64Field(_ tag: UInt, _ value: UInt64, defaultValue: UInt64? = 0) {
         guard value != defaultValue else { return }
         let field = Field(tag, wireType: .varint)
         encodeVarint(field.rawValue)
@@ -205,7 +205,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func intField(_ tag: UInt, _ value: Int, defaultValue: Int? = 0) {
+    public mutating func intField(_ tag: UInt, _ value: Int, defaultValue: Int? = 0) {
         guard value != defaultValue else { return }
         let field = Field(tag, wireType: .varint)
         encodeVarint(field.rawValue)
@@ -219,7 +219,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func int64Field(_ tag: UInt, _ value: Int64, defaultValue: Int64? = 0) {
+    public mutating func int64Field(_ tag: UInt, _ value: Int64, defaultValue: Int64? = 0) {
         guard value != defaultValue else { return }
         let field = Field(tag, wireType: .varint)
         encodeVarint(field.rawValue)
@@ -233,7 +233,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func fixed32Field(_ tag: UInt, _ value: UInt32, defaultValue: UInt32? = 0) {
+    public mutating func fixed32Field(_ tag: UInt, _ value: UInt32, defaultValue: UInt32? = 0) {
         guard value != defaultValue else { return }
         let field = Field(tag, wireType: .fixed32)
         encodeVarint(field.rawValue)
@@ -247,7 +247,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func fixed64Field(_ tag: UInt, _ value: UInt64, defaultValue: UInt64? = 0) {
+    public mutating func fixed64Field(_ tag: UInt, _ value: UInt64, defaultValue: UInt64? = 0) {
         guard value != defaultValue else { return }
         let field = Field(tag, wireType: .fixed64)
         encodeVarint(field.rawValue)
@@ -261,7 +261,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func floatField(_ tag: UInt, _ value: Float, defaultValue: Float? = 0) {
+    public mutating func floatField(_ tag: UInt, _ value: Float, defaultValue: Float? = 0) {
         guard value != defaultValue else { return }
         let field = Field(tag, wireType: .fixed32)
         encodeVarint(field.rawValue)
@@ -275,7 +275,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func doubleField(_ tag: UInt, _ value: Double, defaultValue: Double? = 0) {
+    public mutating func doubleField(_ tag: UInt, _ value: Double, defaultValue: Double? = 0) {
         guard value != defaultValue else { return }
         let field = Field(tag, wireType: .fixed64)
         encodeVarint(field.rawValue)
@@ -289,7 +289,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func cgFloatField(_ tag: UInt, _ value: CGFloat, defaultValue: CGFloat? = 0) {
+    public mutating func cgFloatField(_ tag: UInt, _ value: CGFloat, defaultValue: CGFloat? = 0) {
         guard value != defaultValue else { return }
         let field = Field(tag, wireType: value < 65536.0 ? .fixed32 : .fixed64)
         encodeVarint(field.rawValue)
@@ -305,7 +305,7 @@ extension ProtobufEncoder {
     /// - Parameters:
     ///   - tag: The tag of the field.
     ///   - value: The value to encode.
-    package mutating func dataField(_ tag: UInt, _ value: Data) {
+    public mutating func dataField(_ tag: UInt, _ value: Data) {
         value.withUnsafeBytes { buffer in
             dataField(tag, buffer)
         }
@@ -316,7 +316,7 @@ extension ProtobufEncoder {
     /// - Parameters:
     ///   - tag: The tag of the field.
     ///   - value: The value to encode.
-    package mutating func dataField(_ tag: UInt, _ value: UnsafeRawBufferPointer) {
+    public mutating func dataField(_ tag: UInt, _ value: UnsafeRawBufferPointer) {
         guard !value.isEmpty else {
             return
         }
@@ -331,7 +331,7 @@ extension ProtobufEncoder {
     ///   - tag: The tag of the field.
     ///   - body: A closure that encodes the value.
     @inline(__always)
-    package mutating func packedField(_ tag: UInt, _ body: (inout ProtobufEncoder) -> Void) {
+    public mutating func packedField(_ tag: UInt, _ body: (inout ProtobufEncoder) -> Void) {
         let field = Field(tag, wireType: .lengthDelimited)
         encodeVarint(field.rawValue)
         stack.append(size)
@@ -346,7 +346,7 @@ extension ProtobufEncoder {
     ///   - tag: The tag of the field.
     ///   - body: A closure that encodes the value.
     @inline(__always)
-    package mutating func messageField(_ tag: UInt, _ body: (inout ProtobufEncoder) throws -> Void) rethrows {
+    public mutating func messageField(_ tag: UInt, _ body: (inout ProtobufEncoder) throws -> Void) rethrows {
         let field = Field(tag, wireType: .lengthDelimited)
         encodeVarint(field.rawValue)
         stack.append(size)
@@ -362,7 +362,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func messageField<T>(_ tag: UInt, _ value: T, defaultValue: T) throws where T: Equatable, T: ProtobufEncodableMessage {
+    public mutating func messageField<T>(_ tag: UInt, _ value: T, defaultValue: T) throws where T: Equatable, T: ProtobufEncodableMessage {
         guard value != defaultValue else { return }
         try messageField(tag, value)
     }
@@ -372,7 +372,7 @@ extension ProtobufEncoder {
     /// - Parameters:
     ///   - tag: The tag of the field.
     ///   - value: The value to encode.
-    package mutating func messageField<T>(_ tag: UInt, _ value: T) throws where T: ProtobufEncodableMessage {
+    public mutating func messageField<T>(_ tag: UInt, _ value: T) throws where T: ProtobufEncodableMessage {
         let field = Field(tag, wireType: .lengthDelimited)
         encodeVarint(field.rawValue)
         try encodeMessage(value)
@@ -397,7 +397,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func stringField(_ tag: UInt, _ value: String, defaultValue: String? = "") throws {
+    public mutating func stringField(_ tag: UInt, _ value: String, defaultValue: String? = "") throws {
         guard value != defaultValue else { return }
         try stringFieldAlways(tag, value)
     }
@@ -427,7 +427,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func codableField<T>(_ tag: UInt, _ value: T, defaultValue: T) throws where T: Encodable, T: Equatable {
+    public mutating func codableField<T>(_ tag: UInt, _ value: T, defaultValue: T) throws where T: Encodable, T: Equatable {
         guard value != defaultValue else { return }
         try codableField(tag, value)
     }
@@ -437,7 +437,7 @@ extension ProtobufEncoder {
     /// - Parameters:
     ///   - tag: The tag of the field.
     ///   - value: The value to encode.
-    package mutating func codableField<T>(_ tag: UInt, _ value: T) throws where T: Encodable {
+    public mutating func codableField<T>(_ tag: UInt, _ value: T) throws where T: Encodable {
         let field = Field(tag, wireType: .lengthDelimited)
         encodeVarint(field.rawValue)
         let data = try binaryPlistData(for: value)
@@ -450,7 +450,7 @@ extension ProtobufEncoder {
     ///
     /// - Parameters:
     ///   - tag: The tag of the field.
-    package mutating func emptyField(_ tag: UInt) {
+    public mutating func emptyField(_ tag: UInt) {
         let field = Field(tag, wireType: .lengthDelimited)
         encodeVarint(field.rawValue)
         stack.append(size)
@@ -468,7 +468,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func boolField<T>(_ tag: T, _ value: Bool, defaultValue: Bool? = false) where T: ProtobufTag {
+    public mutating func boolField<T>(_ tag: T, _ value: Bool, defaultValue: Bool? = false) where T: ProtobufTag {
         boolField(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -479,7 +479,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func uintField<T>(_ tag: T, _ value: UInt, defaultValue: UInt? = 0) where T: ProtobufTag {
+    public mutating func uintField<T>(_ tag: T, _ value: UInt, defaultValue: UInt? = 0) where T: ProtobufTag {
         uintField(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -490,7 +490,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func enumField<T, U>(_ tag: T, _ value: U, defaultValue: U?) where T: ProtobufTag, U: Equatable, U: ProtobufEnum {
+    public mutating func enumField<T, U>(_ tag: T, _ value: U, defaultValue: U?) where T: ProtobufTag, U: Equatable, U: ProtobufEnum {
         enumField(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -500,7 +500,7 @@ extension ProtobufEncoder {
     ///   - tag: The tag of the field.
     ///   - value: The value to encode.
     @inline(__always)
-    package mutating func enumField<T, U>(_ tag: T, _ value: U) where T: ProtobufTag, U: ProtobufEnum {
+    public mutating func enumField<T, U>(_ tag: T, _ value: U) where T: ProtobufTag, U: ProtobufEnum {
         enumField(tag.rawValue, value)
     }
     
@@ -511,7 +511,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func uint64Field<T>(_ tag: T, _ value: UInt64, defaultValue: UInt64? = 0) where T: ProtobufTag {
+    public mutating func uint64Field<T>(_ tag: T, _ value: UInt64, defaultValue: UInt64? = 0) where T: ProtobufTag {
         uint64Field(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -522,7 +522,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func intField<T>(_ tag: T, _ value: Int, defaultValue: Int? = 0) where T: ProtobufTag {
+    public mutating func intField<T>(_ tag: T, _ value: Int, defaultValue: Int? = 0) where T: ProtobufTag {
         intField(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -533,7 +533,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func int64Field<T>(_ tag: T, _ value: Int64, defaultValue: Int64? = 0) where T: ProtobufTag {
+    public mutating func int64Field<T>(_ tag: T, _ value: Int64, defaultValue: Int64? = 0) where T: ProtobufTag {
         int64Field(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -544,7 +544,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func fixed32Field<T>(_ tag: T, _ value: UInt32, defaultValue: UInt32? = 0) where T: ProtobufTag {
+    public mutating func fixed32Field<T>(_ tag: T, _ value: UInt32, defaultValue: UInt32? = 0) where T: ProtobufTag {
         fixed32Field(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -555,7 +555,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func fixed64Field<T>(_ tag: T, _ value: UInt64, defaultValue: UInt64? = 0) where T: ProtobufTag {
+    public mutating func fixed64Field<T>(_ tag: T, _ value: UInt64, defaultValue: UInt64? = 0) where T: ProtobufTag {
         fixed64Field(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -566,7 +566,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func floatField<T>(_ tag: T, _ value: Float, defaultValue: Float? = 0) where T: ProtobufTag {
+    public mutating func floatField<T>(_ tag: T, _ value: Float, defaultValue: Float? = 0) where T: ProtobufTag {
         floatField(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -577,7 +577,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func doubleField<T>(_ tag: T, _ value: Double, defaultValue: Double? = 0) where T: ProtobufTag {
+    public mutating func doubleField<T>(_ tag: T, _ value: Double, defaultValue: Double? = 0) where T: ProtobufTag {
         doubleField(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -588,7 +588,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func cgFloatField<T>(_ tag: T, _ value: CGFloat, defaultValue: CGFloat? = 0) where T: ProtobufTag {
+    public mutating func cgFloatField<T>(_ tag: T, _ value: CGFloat, defaultValue: CGFloat? = 0) where T: ProtobufTag {
         cgFloatField(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -598,7 +598,7 @@ extension ProtobufEncoder {
     ///   - tag: The tag of the field.
     ///   - value: The value to encode.
     @inline(__always)
-    package mutating func dataField<T>(_ tag: T, _ value: Data) where T: ProtobufTag {
+    public mutating func dataField<T>(_ tag: T, _ value: Data) where T: ProtobufTag {
         dataField(tag.rawValue, value)
     }
     
@@ -608,7 +608,7 @@ extension ProtobufEncoder {
     ///   - tag: The tag of the field.
     ///   - value: The value to encode.
     @inline(__always)
-    package mutating func dataField<T>(_ tag: T, _ value: UnsafeRawBufferPointer) where T: ProtobufTag {
+    public mutating func dataField<T>(_ tag: T, _ value: UnsafeRawBufferPointer) where T: ProtobufTag {
         dataField(tag.rawValue, value)
     }
     
@@ -618,7 +618,7 @@ extension ProtobufEncoder {
     ///   - tag: The tag of the field.
     ///   - body: A closure that encodes the value.
     @inline(__always)
-    package mutating func packedField<T>(_ tag: T, _ body: (inout ProtobufEncoder) -> Void) where T: ProtobufTag {
+    public mutating func packedField<T>(_ tag: T, _ body: (inout ProtobufEncoder) -> Void) where T: ProtobufTag {
         packedField(tag.rawValue, body)
     }
     
@@ -628,7 +628,7 @@ extension ProtobufEncoder {
     ///   - tag: The tag of the field.
     ///   - body: A closure that encodes the value.
     @inline(__always)
-    package mutating func messageField<T>(_ tag: T, _ body: (inout ProtobufEncoder) throws -> Void) rethrows where T: ProtobufTag {
+    public mutating func messageField<T>(_ tag: T, _ body: (inout ProtobufEncoder) throws -> Void) rethrows where T: ProtobufTag {
         try messageField(tag.rawValue, body)
     }
     
@@ -639,7 +639,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func messageField<T, U>(_ tag: T, _ value: U, defaultValue: U) throws where T: ProtobufTag, U: Equatable, U: ProtobufEncodableMessage {
+    public mutating func messageField<T, U>(_ tag: T, _ value: U, defaultValue: U) throws where T: ProtobufTag, U: Equatable, U: ProtobufEncodableMessage {
         try messageField(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -649,7 +649,7 @@ extension ProtobufEncoder {
     ///   - tag: The tag of the field.
     ///   - value: The value to encode.
     @inline(__always)
-    package mutating func messageField<T>(_ tag: T, _ value: ProtobufEncodableMessage) throws where T: ProtobufTag {
+    public mutating func messageField<T>(_ tag: T, _ value: ProtobufEncodableMessage) throws where T: ProtobufTag {
         try messageField(tag.rawValue, value)
     }
     
@@ -660,7 +660,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func stringField<T>(_ tag: T, _ value: String, defaultValue: String? = "") throws where T: ProtobufTag {
+    public mutating func stringField<T>(_ tag: T, _ value: String, defaultValue: String? = "") throws where T: ProtobufTag {
         try stringField(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -671,7 +671,7 @@ extension ProtobufEncoder {
     ///   - value: The value to encode.
     ///   - defaultValue: The default value of the field.
     @inline(__always)
-    package mutating func codableField<T>(_ tag: T, _ value: T, defaultValue: T) throws where T: ProtobufTag, T: Encodable, T: Equatable {
+    public mutating func codableField<T>(_ tag: T, _ value: T, defaultValue: T) throws where T: ProtobufTag, T: Encodable, T: Equatable {
         try codableField(tag.rawValue, value, defaultValue: defaultValue)
     }
     
@@ -681,7 +681,7 @@ extension ProtobufEncoder {
     ///   - tag: The tag of the field.
     ///   - value: The value to encode.
     @inline(__always)
-    package mutating func codableField<T>(_ tag: T, _ value: T) throws where T: ProtobufTag, T: Encodable {
+    public mutating func codableField<T>(_ tag: T, _ value: T) throws where T: ProtobufTag, T: Encodable {
         try codableField(tag.rawValue, value)
     }
 }
@@ -691,7 +691,7 @@ extension ProtobufEncoder {
     ///
     /// - Parameters:
     ///   - value: The value to encode.
-    package mutating func encodeVarint(_ value: UInt) {
+    public mutating func encodeVarint(_ value: UInt) {
         let highBit = 64 - (value | 1).leadingZeroBitCount
         let count = (highBit + 6) / 7
         let oldSize = size
@@ -715,7 +715,7 @@ extension ProtobufEncoder {
     }
     
     /// Encodes a varint.
-    package mutating func encodeVarint64(_ value: UInt64) {
+    public mutating func encodeVarint64(_ value: UInt64) {
         encodeVarint(UInt(value))
     }
     
@@ -725,7 +725,7 @@ extension ProtobufEncoder {
     ///
     /// - Parameters:
     ///   - value: The value to encode.
-    package mutating func encodeVarintZZ(_ value: Int) {
+    public mutating func encodeVarintZZ(_ value: Int) {
         encodeVarint(UInt(bitPattern: (value << 1) ^ (value >> 63)))
     }
     
@@ -733,7 +733,7 @@ extension ProtobufEncoder {
     ///
     /// - Parameters:
     ///   - value: The value to encode.
-    package mutating func encodeVarint64ZZ(_ value: Int64) {
+    public mutating func encodeVarint64ZZ(_ value: Int64) {
         encodeVarintZZ(Int(value))
     }
     
@@ -757,7 +757,7 @@ extension ProtobufEncoder {
     ///
     /// - Parameters:
     ///   - value: The value to encode.
-    package mutating func encodeBool(_ value: Bool) {
+    public mutating func encodeBool(_ value: Bool) {
         encodeBitwiseCopyable(value)
     }
     
@@ -765,7 +765,7 @@ extension ProtobufEncoder {
     ///
     /// - Parameters:
     ///   - value: The value to encode.
-    package mutating func encodeFixed32(_ value: UInt32) {
+    public mutating func encodeFixed32(_ value: UInt32) {
         encodeBitwiseCopyable(value)
     }
     
@@ -773,7 +773,7 @@ extension ProtobufEncoder {
     ///
     /// - Parameters:
     ///   - value: The value to encode.
-    package mutating func encodeFixed64(_ value: UInt64) {
+    public mutating func encodeFixed64(_ value: UInt64) {
         encodeBitwiseCopyable(value)
     }
     
@@ -781,7 +781,7 @@ extension ProtobufEncoder {
     ///
     /// - Parameters:
     ///   - value: The value to encode.
-    package mutating func encodeFloat(_ value: Float) {
+    public mutating func encodeFloat(_ value: Float) {
         encodeBitwiseCopyable(value)
     }
     
@@ -789,7 +789,7 @@ extension ProtobufEncoder {
     ///
     /// - Parameters:
     ///   - value: The value to encode.
-    package mutating func encodeDouble(_ value: Double) {
+    public mutating func encodeDouble(_ value: Double) {
         encodeBitwiseCopyable(value)
     }
     
@@ -797,7 +797,7 @@ extension ProtobufEncoder {
     ///
     /// - Parameters:
     ///   - dataBuffer: The data to encode.
-    package mutating func encodeData(_ dataBuffer: UnsafeRawBufferPointer) {
+    public mutating func encodeData(_ dataBuffer: UnsafeRawBufferPointer) {
         // Encode LEN
         let dataBufferCount = dataBuffer.count
         encodeVarint(UInt(bitPattern: dataBufferCount))
@@ -822,7 +822,7 @@ extension ProtobufEncoder {
     ///
     /// - Parameters:
     ///   - value: The value to encode.
-    package mutating func encodeMessage<T>(_ value: T) throws where T: ProtobufEncodableMessage {
+    public mutating func encodeMessage<T>(_ value: T) throws where T: ProtobufEncodableMessage {
         stack.append(size)
         size += 1
         try value.encode(to: &self)
diff --git a/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufMessage.swift b/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufMessage.swift
index 5ed6b1e..bcbf1d8 100644
--- a/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufMessage.swift
+++ b/Sources/OpenSwiftUICore/Data/Protobuf/ProtobufMessage.swift
@@ -7,7 +7,7 @@ import Foundation
 // MARK: - ProtobufMessage
 
 /// A type that can encode itself to a protobuf representation.
-package protocol ProtobufEncodableMessage {
+public protocol ProtobufEncodableMessage {
     /// Encodes this value into the given encoder.
     ///
     /// If the value fails to encode anything, `encoder` will encode an empty
@@ -21,7 +21,7 @@ package protocol ProtobufEncodableMessage {
 }
 
 /// A  type that can decode itself from a protobuf representation.
-package protocol ProtobufDecodableMessage {
+public protocol ProtobufDecodableMessage {
     /// Creates a new instance by decoding from the given decoder.
     ///
     /// This initializer throws an error if reading from the decoder fails, or
@@ -37,12 +37,12 @@ package protocol ProtobufDecodableMessage {
 /// `ProtobufMessage` is a type alias for the `ProtobufEncodableMessage` and `ProtobufDecodableMessage` protocols.
 /// When you use `ProtobufMessage` as a type or a generic constraint, it matches
 /// any type that conforms to both protocols.
-package typealias ProtobufMessage = ProtobufDecodableMessage & ProtobufEncodableMessage
+public typealias ProtobufMessage = ProtobufDecodableMessage & ProtobufEncodableMessage
 
 // MARK: - ProtobufEnum
 
 /// A type that can be represented as a protobuf enum.
-package protocol ProtobufEnum {
+public protocol ProtobufEnum {
     /// The value of the enum as a protobuf enum.
     var protobufValue: UInt { get }
 
@@ -52,12 +52,12 @@ package protocol ProtobufEnum {
 
 extension ProtobufEnum where Self: RawRepresentable, RawValue: BinaryInteger {
     /// The value of the enum as a protobuf enum.
-    package var protobufValue: UInt {
+    public var protobufValue: UInt {
         UInt(rawValue)
     }
     
     /// Creates an instance from a protobuf enum value.
-    package init?(protobufValue: UInt) {
+    public init?(protobufValue: UInt) {
         self.init(rawValue: RawValue(protobufValue))
     }
 }
@@ -67,7 +67,7 @@ extension ProtobufEnum where Self: RawRepresentable, RawValue: BinaryInteger {
 /// A protocol representing a tag in protobuf encoding.
 ///
 /// Conforms to `Equatable` to allow comparison of tags.
-package protocol ProtobufTag: Equatable {
+public protocol ProtobufTag: Equatable {
     /// The raw value of the tag.
     var rawValue: UInt { get }
 
@@ -78,37 +78,37 @@ package protocol ProtobufTag: Equatable {
 // MARK: - ProtobufFormat
 
 /// A type representing the format of a protobuf encoding.
-package enum ProtobufFormat {
+public enum ProtobufFormat {
     /// A type representing the wire type of a protobuf encoding.
-    package struct WireType: Equatable {
+    public struct WireType: Equatable {
         /// The raw value of the wire type.
-        package let rawValue: UInt
+        public let rawValue: UInt
         
         /// Creates an instance from a raw value.
-        package init(rawValue: UInt) {
+        public init(rawValue: UInt) {
             self.rawValue = rawValue
         }
         
         /// A wire type representing a varint.
-        package static var varint: ProtobufFormat.WireType { WireType(rawValue: 0) }
+        public static var varint: ProtobufFormat.WireType { WireType(rawValue: 0) }
         
         /// A wire type representing a fixed 64-bit value.
-        package static var fixed64: ProtobufFormat.WireType { WireType(rawValue: 1) }
+        public static var fixed64: ProtobufFormat.WireType { WireType(rawValue: 1) }
         
         /// A wire type representing a length-delimited value.
-        package static var lengthDelimited: ProtobufFormat.WireType { WireType(rawValue: 2) }
+        public static var lengthDelimited: ProtobufFormat.WireType { WireType(rawValue: 2) }
         
         /// A wire type representing a fixed 32-bit value.
-        package static var fixed32: ProtobufFormat.WireType { WireType(rawValue: 5) }
+        public static var fixed32: ProtobufFormat.WireType { WireType(rawValue: 5) }
     }
 
     /// A type representing a field in a protobuf encoding.
-    package struct Field: Equatable {
+    public struct Field: Equatable {
         /// The raw value of the field.
-        package var rawValue: UInt
+        public var rawValue: UInt
 
         /// Creates an instance from a raw value.
-        package init(rawValue: UInt) {
+        public init(rawValue: UInt) {
             self.rawValue = rawValue
         }
         
@@ -116,23 +116,23 @@ package enum ProtobufFormat {
         // See https://protobuf.dev/programming-guides/encoding/
 
         /// Creates an instance from a tag and wire type.
-        package init(_ tag: UInt, wireType: WireType) {
+        public init(_ tag: UInt, wireType: WireType) {
             rawValue = (tag << 3) | wireType.rawValue
         }
         
         /// The tag of the field.
-        package var tag: UInt {
+        public var tag: UInt {
             rawValue >> 3
         }
         
         /// The wire type of the field.
-        package var wireType: WireType {
+        public var wireType: WireType {
             WireType(rawValue: rawValue & 7)
         }
         
         /// Converts the tag to a specific type.
         @inline(__always)
-        package func tag<T>(as: T.Type = T.self) -> T where T: ProtobufTag {
+        public func tag<T>(as: T.Type = T.self) -> T where T: ProtobufTag {
             T(rawValue: tag)
         }
     }
@@ -141,7 +141,7 @@ package enum ProtobufFormat {
 // MARK: - CoddleByProtobuf
 
 /// A type that can be encoded and decoded using protobuf.
-package protocol CodaleByProtobuf: Codable, ProtobufMessage {}
+public protocol CodaleByProtobuf: Codable, ProtobufMessage {}
 
 extension CodaleByProtobuf {
     /// Encodes the value to a protobuf representation.
@@ -168,17 +168,17 @@ extension CodaleByProtobuf {
 
 /// A property wrapper that encodes and decodes a value using protobuf.
 @propertyWrapper
-package struct ProtobufCodable<Value>: Codable where Value: ProtobufMessage {
+public struct ProtobufCodable<Value>: Codable where Value: ProtobufMessage {
     /// The wrapped value.
-    package var wrappedValue: Value
+    public var wrappedValue: Value
     
     /// Creates an instance with a wrapped value.
-    package init(wrappedValue: Value) {
+    public init(wrappedValue: Value) {
         self.wrappedValue = wrappedValue
     }
 
     /// Encodes the wrapped value to a protobuf representation.
-    package func encode(to encoder: any Encoder) throws {
+    public func encode(to encoder: any Encoder) throws {
         let data = try ProtobufEncoder.encoding { protobufEncoder in
             protobufEncoder.userInfo = encoder.userInfo
             try wrappedValue.encode(to: &protobufEncoder)
@@ -188,7 +188,7 @@ package struct ProtobufCodable<Value>: Codable where Value: ProtobufMessage {
     }
 
     /// Creates an instance from a decoder.
-    package init(from decoder: any Decoder) throws {
+    public init(from decoder: any Decoder) throws {
         let container = try decoder.singleValueContainer()
         let data = try container.decode(Data.self)
         var protobufDecoder = ProtobufDecoder(data)
@@ -199,7 +199,7 @@ package struct ProtobufCodable<Value>: Codable where Value: ProtobufMessage {
 
 extension ProtobufCodable: Equatable where Value: Equatable {
     /// Compares two instances of `ProtobufCodable`.
-    package static func == (lhs: ProtobufCodable<Value>, rhs: ProtobufCodable<Value>) -> Bool {
+    public static func == (lhs: ProtobufCodable<Value>, rhs: ProtobufCodable<Value>) -> Bool {
         lhs.wrappedValue == rhs.wrappedValue
     }
 }
-- 
2.47.0

